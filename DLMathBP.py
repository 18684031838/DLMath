import torch
import numpy


# 加载数据
def load_data():
    t1 = torch.tensor([[1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1],
                           [1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0]])
    t2 = torch.tensor([[1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1],
                           [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1]])
    t3 = torch.tensor([[0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1],
                           [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0]])
    t4 = torch.tensor([[1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0],
                           [1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1]])

    t5 = torch.tensor([[1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1],
                           [1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1]])
    t6 = torch.tensor([[1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1],
                           [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1]])
    t7 = torch.tensor([[0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1],
                           [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1]])
    t8 = torch.tensor([[1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1],
                           [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1]])

    t9 = torch.tensor([[0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],
                           [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0]])

    t10 = torch.tensor([[0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0],
                            [1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1]])

    t11 = torch.tensor([[0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0],
                            [1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0], [1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1]])

    t12 = torch.tensor([[0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0],
                            [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1]])

    t13 = torch.tensor([[1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1],
                            [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0]])

    t14 = torch.tensor([[1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
                            [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]])

    t15 = torch.tensor([[1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
                            [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0]])

    t16 = torch.tensor([[0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0],
                            [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0]])

    result = torch.concat((t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16),dim=0)
    return result


def load_label():
    t01 = torch.tensor([1])
    t02 = torch.tensor([0])

    tx01 = t01.expand(32, -1)
    tx02 = t02.expand(32, -1)

    t11 = torch.tensor([0])
    t12 = torch.tensor([1])

    tx11 = t11.expand(32, -1)
    tx12 = t12.expand(32, -1)

    t1 = torch.cat((tx01,tx11),dim=0)
    t2 = torch.cat((tx02,tx12),dim=0)

    return t1,t2


def init_hidden_layer1_weight():
    w1 = torch.tensor([[0.49038557898997, 0.348475676796501, 0.0725879008695083,
                                    0.837472826850604, -0.0706798311519743, -3.6169369170322,
                                    -0.53557819719488, -0.0228584789393108, -1.71745249082217,
                                    -1.45563751579807, -0.555799932254451, 0.852476539980059]])
    b1 = -0.185002356132065

    return w1, b1


def init_hidden_layer2_weight():
    w2 = torch.tensor([[0.442372911956926, -0.536877487857221, 1.00782536916829,
                                    1.07196001297575, -0.732814485632708, 0.822959617857012,
                                    -0.453282364154155, -0.0138979392949318, -0.0274233258563056,
                                    -0.426670298661898, 1.87560275441379, -2.30528048189891]])
    b2 = 0.525676844318642

    return w2, b2


def init_hidden_layer3_weight():
    w3 = torch.tensor([[0.654393041569443, -1.38856820257739, 1.24648311661583,
                                    0.0572877158406771, -0.183237472237546, -0.74305066513479,
                                    -0.460930664925325, 0.331118557255208, 0.449470835925128,
                                    -1.29645372413246, 1.56850561324256, -0.470667153317658]])
    b3 = -1.16862269778991

    return w3, b3


def init_output_layer1_weight():
    w1 = torch.tensor([[0.3880031194962, 0.803384989025837, 0.0292864334994403]])
    b1 = -1.43803971240614
    return w1, b1


def init_output_layer2_weight():
    w2 = torch.tensor([[0.0254467679708455, -0.790397993881956, 1.55313793058729]])
    b2 = -1.37933790823328
    return w2, b2


def linear(x, w, b):
    return torch.sum(x * w, dim=1) + b


def sigmoid(x):
    result = 1 / (1 + torch.exp(-x))
    return result


def sigmoid_derivative(a):
    return a * (1 - a)


def cost(right_answer,predicate_result):
    t1,t2 = right_answer
    p1,p2 = predicate_result
    p1_reshape = torch.unsqueeze(p1,1)
    p2_reshape = torch.unsqueeze(p2,1)

    return ((t1-p1_reshape)**2+(t2-p2_reshape)**2)/2
